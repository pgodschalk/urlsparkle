# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: URLSparkle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Biome CLI
        uses: biomejs/setup-biome@c016c38f26f2c4a6eb3662679143614a254263fd # v2.3.0

      - name: Set up ruff
        uses: astral-sh/ruff-action@39f75e526a505e26a302f8796977b50c13720edf # v3.2.1

      - name: Run Biome
        run: biome ci

      - name: Run markdownlint
        uses: DavidAnson/markdownlint-cli2-action@05f32210e84442804257b2a6f20b273450ec8265 # v19.1.0
        with:
          globs: "**/*.md"

      - name: Run ruff
        run: |
          ruff check .
          ruff format --check .

  build:
    name: Build, test and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 # v2.0.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta-dev
        name: Docker meta (development)
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest-dev,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}-dev

      - id: meta-prod
        name: Docker meta (production)
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}

      - name: Build (development)
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        with:
          annotations: ${{ steps.meta-dev.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev,mode=max
          context: backend/
          file: ./backend/Dockerfile
          labels: ${{ steps.meta-dev.outputs.labels }}
          load: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          target: development

      - name: Run tests
        run: |
          docker compose up -d postgresql
          APP_VERSION=${{ github.sha }} docker compose run urlsparkle alembic upgrade head
          APP_VERSION=${{ github.sha }} docker compose up -d
          APP_VERSION=${{ github.sha }} docker compose exec urlsparkle pytest

          curl -o openapi.json http://localhost:8000/openapi.json
          bunx @redocly/cli@latest lint openapi.json

      - name: Build and push (development)
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        with:
          annotations: ${{ steps.meta-dev.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev,mode=max
          context: backend/
          file: ./backend/Dockerfile
          labels: ${{ steps.meta-dev.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          target: development

      - id: build-prod
        name: Build and push (production)
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        with:
          annotations: ${{ steps.meta-prod.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          context: backend/
          file: ./backend/Dockerfile
          labels: ${{ steps.meta-prod.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-prod.outputs.tags }}
          target: production

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-digest: ${{ steps.build-prod.outputs.digest }}
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          push-to-registry: true

      - if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        name: Build documentation
        run: |
          mkdir _site
          cp openapi.json _site/openapi.json
          bunx @redocly/cli@latest build-docs openapi.json -o _site/index.html

      - if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        id: upload-docs
        name: Upload docs
        uses: actions/upload-pages-artifact@v3

  docs:
    name: Deploy API documentation
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build
    environment:
      name: API Documentation
      url: ${{ steps.upload-docs.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy documentation
        uses: actions/deploy-pages@v4
