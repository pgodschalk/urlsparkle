---
name: URLSparkle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build, test and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta-dev
        name: Docker meta (development)
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest-dev,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}-dev

      - id: meta-prod
        name: Docker meta (production)
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}

      - name: Build (development)
        uses: docker/build-push-action@v6
        with:
          annotations: ${{ steps.meta-dev.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev,mode=max
          context: backend/
          file: ./backend/Dockerfile
          labels: ${{ steps.meta-dev.outputs.labels }}
          load: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          target: development

      - name: Run tests
        run: |
          docker compose up -d postgresql
          APP_VERSION=${{ github.sha }} docker compose run urlsparkle alembic upgrade head
          APP_VERSION=${{ github.sha }} docker compose run urlsparkle pytest

      - name: Build and push (development)
        uses: docker/build-push-action@v6
        with:
          annotations: ${{ steps.meta-dev.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dev,mode=max
          context: backend/
          file: ./backend/Dockerfile
          labels: ${{ steps.meta-dev.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          target: development

      - id: build-prod
        name: Build and push (production)
        uses: docker/build-push-action@v6
        with:
          annotations: ${{ steps.meta-prod.outputs.annotations }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          context: backend/
          file: ./backend/Dockerfile
          labels: ${{ steps.meta-prod.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-prod.outputs.tags }}
          target: production

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-digest: ${{ steps.build-prod.outputs.digest }}
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          push-to-registry: true
